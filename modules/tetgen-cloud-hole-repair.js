#!/usr/bin/env node

/**
 * @description 4. 三角格网修复
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const exec = require('child_process').exec;

// ///////////////////////////////////////

const ProgressBar = require('../util/progress-bar');
const separator = require('../assets/separator');

// ///////////////////////////////////////

const step_04 = (input) => {
    return new Promise((resolve, reject) => {
        separator('🚗🚗🚗「step_04」is processing');
        exec(`wc -l ${input}`, function (error, results) {
            const total = Number(results.replace(input, '').trim());
            const output = input.replace(path.basename(input), `[step_04]${path.basename(input)}`).replace(path.extname(input), '.node');
            if (total && total > 0) {
                let index = 0;
                const _pb = new ProgressBar('🦶🦶🦶 reading original data ');
                const _fr = fs.createReadStream(input);
                const _fw = fs.createWriteStream(output);
                const _rl = readline.createInterface({
                    input: _fr,
                    output: _fw,
                    terminal: false
                });
                _rl.on('line', (line) => {
                    _fw.write(`${index} ${line.trim()} 1\n`);
                    _pb.render({ completed: index, total });
                    index++;
                });
                _rl.on('close', () => {
                    _fw.write(`# Generated by tetgen -f ${output}`);
                });
                _fr.on('open', () => {
                    _fw.write(`${total} 3 0 1\n`);
                });
                _fr.on('end', () => {
                    separator('👌👌👌「step_04」is finished');
                    _fw.end();
                    resolve(output);
                });
            }
        });
    });
};

module.exports = step_04;